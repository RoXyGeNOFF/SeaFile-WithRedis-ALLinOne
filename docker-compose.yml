version: "3.9"

services:
  mysql:
    image: ${MYSQL_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}_mysql
    command: ["--character-set-server=utf8mb4","--collation-server=utf8mb4_unicode_ci","--innodb-buffer-pool-size=256M"]
    environment:
      - TZ=Europe/Moscow
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_USER_PASSWORD}
      TZ: ${TIME_ZONE}
    volumes:
      - ${MYSQL_DATA_DIR}:/var/lib/mysql
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -p${MYSQL_ROOT_PASSWORD} --silent"]
      start_period: 30s
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  redis:
    image: ${REDIS_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    command: >
      sh -c 'redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"'
    environment:
      - TZ=Europe/Moscow
      TZ: ${TIME_ZONE}
    volumes:
      - ${REDIS_DATA_DIR}:/data
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped

  elasticsearch:
    image: ${ELASTIC_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}_elasticsearch
    environment:
      - TZ=Europe/Moscow
      discovery.type: single-node
      ES_JAVA_OPTS: "${ES_JAVA_OPTS}"
      TZ: ${TIME_ZONE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 2g
    volumes:
      - ${ELASTIC_DATA_DIR}:/usr/share/elasticsearch/data
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:9200 >/dev/null 2>&1"]
      interval: 15s
      timeout: 5s
      retries: 20
      start_period: 30s
    restart: unless-stopped

  # init-сервис, который ждёт доступности MySQL/Redis/ES и завершается
  seafile_init:
    image: ${INIT_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}_seafile_init
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./scripts/wait-for-services.sh:/wait-for-services.sh:ro
    entrypoint: ["sh","-c","chmod +x /wait-for-services.sh && /wait-for-services.sh"]
    networks:
      - ${DOCKER_NETWORK}
    restart: "no"

  seafile:
    image: ${SEAFILE_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}_seafile
    depends_on:
      seafile_init:
        condition: service_completed_successfully
    environment:
      - TZ=Europe/Moscow
      DB_HOST: ${MYSQL_HOST}
      DB_ROOT_PASSWD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_USER_PASSWORD: ${MYSQL_USER_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      SEAFILE_SERVER_HOSTNAME: ${SEAFILE_SERVER_HOSTNAME}
      SEAFILE_ADMIN_EMAIL: ${SEAFILE_ADMIN_EMAIL}
      SEAFILE_ADMIN_PASSWORD: ${SEAFILE_ADMIN_PASSWORD}
      TIME_ZONE: ${TIME_ZONE}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWD: ${REDIS_PASSWORD}
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}
      ELASTICSEARCH_PORT: ${ELASTICSEARCH_PORT}
    volumes:
      - ${SEAFILE_DATA_DIR}:/shared
    expose:
      - "80"     # Seahub
      - "8082"   # File server
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1/ >/dev/null 2>&1"]
      interval: 30s
      timeout: 10s
      retries: 20
      start_period: 60s
    restart: unless-stopped

  nginx:
    image: ${NGINX_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    depends_on:
      seafile:
        condition: service_started
    ports:
      - "${HOST_HTTP_PORT}:80"
      - "${HOST_HTTPS_PORT}:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/options-ssl-nginx.conf:/etc/nginx/options-ssl-nginx.conf:ro
      - ${CERTBOT_CONF}:/etc/letsencrypt
      - ${CERTBOT_WWW}:/var/www/certbot
    environment:
      - TZ=Europe/Moscow
      TZ: ${TIME_ZONE}
    networks:
      - ${DOCKER_NETWORK}
    healthcheck:
      test: ["CMD-SHELL", "nginx -t"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  certbot:
    image: ${CERTBOT_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}_certbot
    depends_on:
      nginx:
        condition: service_started
    volumes:
      - ${CERTBOT_CONF}:/etc/letsencrypt
      - ${CERTBOT_WWW}:/var/www/certbot
    entrypoint: >
      sh -c 'trap exit TERM;
      while :; do
        certbot renew --webroot -w /var/www/certbot --agree-tos --email ${LETSENCRYPT_EMAIL};
        sleep 12h;
      done'
    networks:
      - ${DOCKER_NETWORK}
    restart: unless-stopped

  # Ночной бэкап БД и данных Seafile
  backup:
    image: ${BACKUP_IMAGE}
    container_name: ${COMPOSE_PROJECT_NAME}_backup
    depends_on:
      mysql:
        condition: service_healthy
      seafile:
        condition: service_started
    environment:
      - TZ=Europe/Moscow
      TZ: ${TIME_ZONE}
    volumes:
      - ${MYSQL_DATA_DIR}:/var/lib/mysql:ro
      - ${SEAFILE_DATA_DIR}:/shared:ro
      - ${BACKUP_DIR}:/backups
    entrypoint: >
      sh -c 'apk add --no-cache mariadb-client tzdata && 
      echo "15 3 * * * /bin/sh /backup.sh" > /etc/crontabs/root &&
      crond -f -L /dev/stdout'
    networks:
      - ${DOCKER_NETWORK}
    restart: unless-stopped
    secrets: []

networks:
  ${DOCKER_NETWORK}:
    driver: bridge
